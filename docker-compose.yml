version: '3.8'

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./backend/static:/app/static
      - ./backend/media:/app/media
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
  redis:
    image: redis:alpine
    networks:
      - app-network

  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build: ./backend/src
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    environment:
      NUXT_HOST: 0.0.0.0
      NUXT_PORT: 3000
      API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  celery:
    build: ./backend/src
    command: celery -A config worker -l info
    depends_on:
      - backend
      - redis
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge